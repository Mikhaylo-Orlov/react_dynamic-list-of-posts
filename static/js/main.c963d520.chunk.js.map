{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/CommentItem.tsx","components/Loader/Loader.tsx","components/NewCommentForm/TextArea/TextArea.tsx","components/NewCommentForm/Field/Field.tsx","components/NewCommentForm/NewCommentForm.tsx","useForm/useForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/user.ts","api/posts.ts","index.tsx"],"names":["PostItem","_ref","post","selectedPostId","onPostSelect","_jsxs","children","_jsx","id","title","className","type","classNames","onClick","postId","PostsList","posts","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","addComment","newComment","removeComment","commentId","concat","CommentItem","comment","onDelete","name","email","href","Loader","TextArea","value","label","errorType","onChange","htmlFor","placeholder","Field","placeHolder","notValid","NewCommentForm","onAddComment","loading","_useForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setEmail","_useState5","_useState6","commentText","setCommentText","_useState7","_useState8","nameError","setNameError","_useState9","_useState10","emailError","setEmailError","_useState11","_useState12","notValidEmail","setNotValidEmail","_useState13","_useState14","commentError","setCommentError","emailRegex","handleClear","handleSubmit","event","preventDefault","trim","test","handleEmailChange","target","handleNameChange","handleTextChange","useForm","onSubmit","PostDetails","selectedPost","comments","setComments","error","setError","setLoading","isVisibleForm","setIsVisibleForm","fetchComments","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commentsFromServer","wrap","_context","prev","next","sent","t0","finish","stop","apply","addNewComment","useCallback","_ref3","_callee2","commentToAdd","_context2","_objectSpread","currentComments","_toConsumableArray","_x","deleteComment","_ref4","_callee3","_context3","filter","_x2","useEffect","UserSelector","users","onUserSelect","isDropdown","setIsDropdown","currentUser","setCurrentUser","dropdown","useRef","handleClickDrop","_dropdown$current","current","contains","document","addEventListener","removeEventListener","handleOpenDrop","prevState","handleSelectUser","user","ref","role","App","setUsers","selectedUserId","setSelectedUserId","setPosts","setSelectedPostId","noPosts","setNoPosts","fetchUsers","usersFromServer","fetchUserPosts","postsFromServer","useMemo","find","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c963d520.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPostId: number,\n  onPostSelect: (postId: number) => void\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPostId,\n  onPostSelect,\n}) => {\n  const handleSelectPost = (postId: number) => {\n    if (postId === selectedPostId) {\n      onPostSelect(0);\n\n      return;\n    }\n\n    onPostSelect(postId);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': selectedPostId !== post.id },\n          )}\n          onClick={() => handleSelectPost(post.id)}\n        >\n          {selectedPostId === post.id ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  onPostSelect: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  onPostSelect,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <PostItem\n            key={post.id}\n            post={post}\n            selectedPostId={selectedPostId}\n            onPostSelect={onPostSelect}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { CommentData, Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (newComment: CommentData) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDelete: (commentId: number) => void,\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment, onDelete }) => {\n  const {\n    name,\n    body,\n    email,\n    id,\n  } = comment;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => onDelete(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div\n        className=\"message-body\"\n        data-cy=\"CommentBody\"\n      >\n        {body}\n      </div>\n    </article>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { ChangeEvent } from 'react';\n\ntype Props = {\n  value: string,\n  label: string,\n  errorType: boolean,\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void,\n};\n\nexport const TextArea: React.FC<Props> = ({\n  value,\n  label,\n  errorType,\n  onChange,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          value={value}\n          placeholder=\"Type comment here\"\n          className={classNames('textarea', {\n            'is-danger': errorType,\n          })}\n          onChange={onChange}\n        />\n      </div>\n\n      {errorType && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  value: string,\n  label: string,\n  errorType: boolean,\n  placeHolder: string,\n  notValid?: boolean,\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const Field: React.FC<Props> = ({\n  value,\n  label,\n  errorType,\n  placeHolder,\n  notValid,\n  onChange,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        {label}\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          value={value}\n          placeholder={placeHolder}\n          className={classNames('input', {\n            'is-danger': errorType,\n          })}\n          onChange={onChange}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {errorType && (\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        )}\n      </div>\n\n      {errorType && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Field is required\n        </p>\n      )}\n\n      {(!errorType && notValid) && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is not valid\n        </p>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../../types/Comment';\nimport { useForm } from '../../useForm/useForm';\nimport { TextArea } from './TextArea/TextArea';\nimport { Field } from './Field/Field';\n\ntype Props = {\n  onAddComment: (comment: CommentData) => void,\n  loading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAddComment,\n  loading,\n}) => {\n  const {\n    name,\n    email,\n    commentText,\n    nameError,\n    emailError,\n    commentError,\n    notValidEmail,\n    handleSubmit,\n    handleClear,\n    handleEmailChange,\n    handleNameChange,\n    handleTextChange,\n  } = useForm({ onAddComment });\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <Field\n        value={name}\n        label=\"Author Name\"\n        placeHolder=\"Name Surname\"\n        errorType={nameError}\n        onChange={handleNameChange}\n      />\n\n      <Field\n        value={email}\n        label=\"Author Email\"\n        placeHolder=\"email@test.com\"\n        errorType={emailError}\n        notValid={notValidEmail}\n        onChange={handleEmailChange}\n      />\n\n      <TextArea\n        value={commentText}\n        label=\"Comment Text\"\n        errorType={commentError}\n        onChange={handleTextChange}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { ChangeEvent, FormEvent, useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ninterface Options {\n  onAddComment: (comment: CommentData) => void,\n}\n\nexport const useForm = (options: Options) => {\n  const { onAddComment } = options;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [notValidEmail, setNotValidEmail] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim() || name.length < 3) {\n      setNameError(true);\n    }\n\n    if (!email.trim()) {\n      setEmailError(true);\n    }\n\n    if (!commentText.trim()) {\n      setCommentError(true);\n    }\n\n    if (!emailRegex.test(email)) {\n      setNotValidEmail(true);\n    }\n\n    const hasError = (\n      !name.trim()\n      || !email.trim()\n      || !commentText.trim()\n      || !emailRegex.test(email)\n    );\n\n    if (hasError) {\n      return;\n    }\n\n    const newComment = {\n      name: name.trim(),\n      email,\n      body: commentText.trim(),\n    };\n\n    onAddComment(newComment);\n    setCommentText('');\n  };\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmailError(false);\n    setEmail(event.target.value);\n    setNotValidEmail(false);\n  };\n\n  const handleTextChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentError(false);\n    setCommentText(event.target.value);\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setCommentText('');\n    setCommentError(false);\n    setEmailError(false);\n    setNameError(false);\n    setNotValidEmail(false);\n  };\n\n  return {\n    name,\n    email,\n    commentText,\n    nameError,\n    emailError,\n    commentError,\n    notValidEmail,\n    handleClear,\n    handleSubmit,\n    handleEmailChange,\n    handleNameChange,\n    handleTextChange,\n  };\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { addComment, getComments, removeComment } from '../api/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { CommentItem } from './CommentItem';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm/NewCommentForm';\n\ntype Props = {\n  selectedPost: Post\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n\n  const fetchComments = async () => {\n    setLoading(true);\n    try {\n      const commentsFromServer = await getComments(selectedPost.id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addNewComment = useCallback(\n    async (newComment: CommentData) => {\n      setLoading(true);\n      try {\n        const commentToAdd = {\n          ...newComment,\n          postId: selectedPost.id,\n        };\n        const comment = await addComment(commentToAdd);\n\n        setComments(currentComments => [...currentComments, comment]);\n      } catch {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }, [],\n  );\n\n  const deleteComment = useCallback(\n    async (commentId: number) => {\n      try {\n        setComments(currentComments => {\n          return currentComments.filter(post => post.id !== commentId);\n        });\n        await removeComment(commentId);\n      } catch {\n        setError(true);\n      }\n    }, [],\n  );\n\n  useEffect(() => {\n    fetchComments();\n    setIsVisibleForm(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && <Loader />}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !error && !loading) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length > 0) && (\n            <p className=\"title is-4\">Comments:</p>)}\n\n          {comments.map(comment => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onDelete={deleteComment}\n            />\n          ))}\n\n          {(!isVisibleForm && !error && !loading) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsVisibleForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isVisibleForm && (\n          <NewCommentForm\n            onAddComment={addNewComment}\n            loading={loading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  onUserSelect: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onUserSelect }) => {\n  const [isDropdown, setIsDropdown] = useState(false);\n  const [currentUser, setCurrentUser] = useState('Choose a user');\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickDrop = (event: MouseEvent) => {\n      const target = event.target as HTMLSelectElement;\n\n      if (!dropdown.current?.contains(target)) {\n        setIsDropdown(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickDrop);\n\n    return () => {\n      document.removeEventListener('click', handleClickDrop);\n    };\n  }, []);\n\n  const handleOpenDrop = useCallback(() => {\n    setIsDropdown(prevState => !prevState);\n  }, []);\n\n  const handleSelectUser = useCallback((user: User) => {\n    onUserSelect(user);\n    setCurrentUser(user.name);\n    setIsDropdown(false);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdown}\n      className={classNames(\n        'dropdown',\n        { 'is-active': isDropdown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenDrop}\n        >\n          <span>\n            {currentUser}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': currentUser === user.name,\n              })}\n              key={user.id}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/user';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [noPosts, setNoPosts] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const handleSelectUser = useCallback((user: User) => {\n    if (user.id !== selectedUserId) {\n      setSelectedUserId(user.id);\n      setSelectedPostId(0);\n      setPosts([]);\n    }\n  }, [selectedUserId]);\n\n  const fetchUserPosts = async () => {\n    setError(false);\n    setNoPosts(false);\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      if (postsFromServer.length === 0) {\n        setNoPosts(true);\n      }\n\n      setPosts(postsFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  const selectedPost = useMemo(() => {\n    return posts.find(post => post.id === selectedPostId);\n  }, [selectedPostId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserSelect={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && <Loader />}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length !== 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPostId}\n                    onPostSelect={setSelectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId > 0 },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}